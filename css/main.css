:root {
  --halt: 0;

  --off: 0;
  --on: 1;

  --left: 0;
  --right: 1;

  --cell-cur: 0;
  --play-cap: paused;

  /* initial values */
  --pos: 0;
  --state-cur: 1;
  --start-state-next: var(--start-state-next-1);

  --off-state-next: 0;
  --on-state-next: 0;
  --end-state-next: 0;
  --off-info-next: 0;
  --on-info-next: 0;

  animation-name: operation-cycle, setup-tape;
  animation-duration: 8s, 0.1s;
  animation-timing-function: linear;
  animation-iteration-count: infinite, 1;
  animation-play-state: paused, running;
  --container-1: normal;
  --container-2: size;
  --opcode: 0;
  --disable-opcode: 9;

  --height: calc(var(--opcode) + var(--disable-opcode));
}

/* fixes chrome not updating container state */
@property --container-1 {
  syntax: "*";
  inherits: true;
  initial-value: size;
}

@property --container-2 {
  syntax: "*";
  inherits: true;
  initial-value: size;
}

.child {
  --cell-cur-start: calc(mod(clamp(0, var(--pos) + 1, 2), 2) * 2);
  --cell-cur-end: calc(mod(clamp(0, var(--pos) - var(--num-cells), 2), 2) * 3);
  --cell-cur-total: calc(var(--cell-cur-start) + var(--cell-cur) + var(--cell-cur-end));

  --state-next-off: calc(mod(clamp(0, var(--cell-cur-total) + 1, 2), 2) * var(--off-state-next));
  --state-next-on: calc(mod(clamp(0, var(--cell-cur-total) + 0, 2), 2) * var(--on-state-next));
  --state-next-start: calc(mod(clamp(0, var(--cell-cur-total) - 1, 2), 2) * var(--start-state-next));
  --state-next-end: calc(mod(clamp(0, var(--cell-cur-total) - 2, 2), 2) * var(--end-state-next));
  --state-next: calc(var(--state-next-off) + var(--state-next-on) + var(--state-next-start) + var(--state-next-end));

  --info-next-off: calc(mod(clamp(0, var(--cell-cur-total) + 1, 2), 2) * var(--off-info-next));
  --info-next-on: calc(mod(clamp(0, var(--cell-cur-total) + 0, 2), 2) * var(--on-info-next));
  --info-next-start: calc(mod(clamp(0, var(--cell-cur-total) - 1, 2), 2) * var(--start-info-next));
  --info-next-end: calc(mod(clamp(0, var(--cell-cur-total) - 2, 2), 2) * var(--end-info-next));
  --info-next: calc(var(--info-next-off) + var(--info-next-on) + var(--info-next-start) + var(--info-next-end));
}

@keyframes setup-tape {
  /* makes firefox update more consistently */
  70% {
    --disable-opcode: 0;
    --opcode: 8;
  }
  80% {
    --container-1: size;
  }
  90% {
    --opcode: 0;
  }
}

@container (height: 8px) {
  #child-1 {
    --setup-play: running;
  }
}

@keyframes operation-cycle {
  0% {
    --container-1: normal;
    --container-2: size;
    --opcode: 0;
  }
  12.5% {
    --container-1: normal;
    --container-2: size;
    --opcode: 1;
  }
  25% {
    --container-1: normal;
    --container-2: size;
    --opcode: 2;
  }
  /* for firefox */
  37.5% {
    --container-1: size;
    --container-2: size;
    --opcode: 3;
  }
  40% {
    --container-1: size;
    --container-2: normal;
    --opcode: 3;
  }
  50% {
    --container-1: size;
    --container-2: normal;
    --opcode: 4;
  }
  62.5% {
    --container-1: size;
    --container-2: normal;
    --opcode: 5;
  }
  75% {
    --container-1: size;
    --container-2: normal;
    --opcode: 6;
  }
  /* for firefox */
  87.5% {
    --container-1: size;
    --container-2: size;
    --opcode: 7;
  }
  90% {
    --container-1: normal;
    --container-2: size;
    --opcode: 7;
  }
}

:root:has(#run:checked) {
  animation-play-state: running;
  --disable-opcode: 0;
}

#grand-parent {
  width: fit-content;
}

#parent-1 {
  height: calc(var(--height) * 1px);
  container-type: var(--container-1);
}

#parent-2 {
  height: calc(var(--height) * 1px);
  container-type: var(--container-2);
}

#child-1 {
  animation-name: var(--animation-val) var(--animation-pos) var(--animation-states) end;
  animation-duration: 3s;
  /* animation-fill-mode: forwards; */
  animation-timing-function: linear;
  animation-play-state: var(--animation-val-play-states) var(--animation-pos-play-states) var(--animation-state-play-state) var(--play-cap);

  --actions-msg: calc(mod(clamp(0, var(--opcode) + 1, 2), 2) * var(--info-next));
  --pos-msg: calc(mod(clamp(0, var(--opcode) + 0, 2), 2) * var(--pos));
  --state-msg: calc(mod(clamp(0, var(--opcode) - 1, 2), 2) * var(--state-next));
  --width-1: calc(var(--actions-msg) + var(--pos-msg) + var(--state-msg));
  width: calc(var(--width-1) * 1px);
}

/*receives reset of child 1*/
@container (height: 3px) {
  #child-1 {
    animation-name: var(--animation-val) end;
  }
}

#child-2 {
  --animation-actions: animation-action-0, animation-action-1, animation-action-2, animation-action-3, halt,;
  --animation-actions-play-states: paused, paused, paused, paused, paused,;
  animation-name: var(--animation-actions) var(--animation-pos) var(--animation-states) end;
  animation-duration: 3s;
  animation-timing-function: linear;
  animation-play-state: var(--animation-actions-play-states) var(--animation-pos-play-states) var(--animation-state-play-state) paused;

  --go: 1;
  --dir: 1;
  --write: 0;
  --reset-msg: calc(mod(clamp(0, var(--opcode) - 2, 2), 2) * var(--go) * var(--pos));
  --write-msg: calc(mod(clamp(0, var(--opcode) - 3, 2), 2) * var(--write) * var(--pos));
  --pos-msg: calc(mod(clamp(0, var(--opcode) - 4, 2), 2) * (var(--dir) + var(--pos)));
  --state-msg: calc(mod(clamp(0, var(--opcode) - 5, 2), 2) * var(--state-cur));
  --width-2: calc(var(--reset-msg) + var(--write-msg) + var(--pos-msg) + var(--state-msg));
  width: calc(var(--width-2) * 1px);
}

/* debug */
@property --height {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --width-1 {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --width-2 {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --state-msg {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

/* @property --info-next {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
} */

@property --cell-cur-end {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --cell-cur-start {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --cell-cur-total {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --info-next-on {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --info-next-off {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --info-next-start {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --info-next-end {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

/* allows display info to be shared to display divs*/
@property --output-cells {
  syntax: "*";
  inherits: true;
}

@property --pos {
  syntax: "*";
  inherits: true;
}

/* @property --cell-cur-total {
  syntax: "*";
  inherits: false;
} */

/* save actions */
@container (width: 0px) and (height: 0px) {
  #child-2 {
    --animation-actions-play-states: running, paused, paused, paused, paused,;
  }
}

@keyframes animation-action-0 {
  10% {
    --dir: -1;
    --write: 0;
  }
}

@container (width: 1px) and (height: 0px) {
  #child-2 {
    --animation-actions-play-states: paused, running, paused, paused, paused,;
  }
}

@keyframes animation-action-1 {
  10% {
    --dir: -1;
    --write: 1;
  }
}

@container (width: 2px) and (height: 0px) {
  #child-2 {
    --animation-actions-play-states: paused, paused, running, paused, paused,;
  }
}

@keyframes animation-action-2 {
  10% {
    --dir: 1;
    --write: 0;
  }
}

@container (width: 3px) and (height: 0px) {
  #child-2 {
    --animation-actions-play-states: paused, paused, paused, running, paused,;
  }
}

@keyframes animation-action-3 {
  10% {
    --dir: 1;
    --write: 1;
  }
}

@container (width: 4px) and (height: 0px) {
  #child-2 {
    --animation-actions-play-states: paused, paused, paused, paused, running,;
  }
}

@keyframes halt {
  10% {
    --dir: 0;
    --write: 0;
    --go: 0;
  }
}

/*receives reset of child 2*/
@container (height: 7px) {
  #child-2 {
    animation-name: initial;
  }
}